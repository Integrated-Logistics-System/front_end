# 🚀 Nginx + Frontend Docker Compose (프로덕션 최적화)
version: '3.8'

services:
  # Nginx 리버스 프록시 & 로드밸런서
  nginx:
    image: nginx:1.25-alpine
    container_name: recipe-ai-nginx
    ports:
      - "81:80"      # HTTP
      - "443:443"    # HTTPS (향후 SSL 적용)
    volumes:
      # Nginx 설정 파일
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      
      # Static 파일 직접 서빙 (성능 최적화)
      - ./nginx/static:/usr/share/nginx/html/static:ro
      
      # 로그 저장
      - ./nginx/logs:/var/log/nginx
      
      # SSL 인증서 (향후 사용)
      # - ./nginx/ssl:/etc/nginx/ssl:ro
    
    environment:
      # Nginx 최적화 설정
      NGINX_WORKER_PROCESSES: auto
      NGINX_WORKER_CONNECTIONS: 1024
    
    depends_on:
      - frontend
      - wait-for-backend
    
    restart: unless-stopped
    
    networks:
      - recipe-ai-network
    
    # Nginx 헬스체크
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: recipe-ai-frontend
    # 🔥 포트를 내부로만 노출 (Nginx를 통해서만 접근)
    expose:
      - "3000"
    environment:
      NODE_ENV: production
      
      # API 연결 (Nginx를 통해 프록시)
      NEXT_PUBLIC_API_URL: http://nginx/api
      NEXT_PUBLIC_WS_URL: ws://nginx/ws
      
      NEXT_TELEMETRY_DISABLED: 1
    
    restart: unless-stopped
    
    networks:
      - recipe-ai-network
    
    # 헬스체크
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 백엔드 대기용
  wait-for-backend:
    image: busybox:1.35
    container_name: wait-for-backend
    command: |
      sh -c "
        echo '⏳ 백엔드 서비스 연결 대기 중...'
        
        # Backend API 대기
        until nc -z 192.168.0.111 8081; do
          echo '🔗 Backend API 연결 대기...'
          sleep 3
        done
        echo '✅ Backend API 연결 확인'
        
        # WebSocket 대기
        until nc -z 192.168.0.111 8083; do
          echo '🔌 WebSocket 연결 대기...'
          sleep 3
        done
        echo '✅ WebSocket 연결 확인'
        
        echo '🚀 백엔드 서비스 준비 완료!'
      "
    networks:
      - recipe-ai-network

networks:
  recipe-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16

# 🎯 사용법:
# docker-compose up -d          # 전체 시작
# docker-compose logs nginx -f  # Nginx 로그 확인
# docker-compose restart nginx  # Nginx만 재시작
